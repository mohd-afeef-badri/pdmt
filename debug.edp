/*****************************************************************************

         This file is a part of PDMT (Parallel Dual Meshing Tool)

     -------------------------------------------------------------------

     Author(s): Mohd Afeef Badri
     Email    : mohd-afeef.badri@cea.com
     Date     : 14/01/2022
     Comment  : The program finds dual of a triangular mesh and then
                create a polyhedral mesh from the underlying Voronoi
                frame. The reason to use  PSD  for this meshing tool
                is the use of finite element framework for this tool

     -------------------------------------------------------------------

     PDMT a parallel  dual meshing tool uses   finite  element framework
     to convert a triangular / tetrahedral mesh into a  polyhedral  mesh.
     PDMT is distributed  in  the  hope that it  will be useful, HOWEVER
     WITHOUT ANY WARRANTY; or without  even  implied warranty of FITNESS
     FOR A PARTICULAR PURPOSE.

*******************************************************************************/


macro printProgramBegins (){

  if( DEBUG ){
    cout << "=========================================\n"
         << " PDMT: Parallel Dual Meshing Tool        \n"
         << "=========================================\n"
         << "\n"
         << "  Debug           : " << DEBUG       << "\n"
         << "  External Mesh   : " << readExtMesh << "\n";
  }

}//


macro printInputMeshStats (){

  if( DEBUG ){
    cout << "----------------------------------\n"
         << " 2D Triangular mesh stats\n"
         << "----------------------------------\n"
         << " Number of Triangles    " << Th.nt  << "\n"
         << " Number of Node         " << Th.nv  << "\n"
         << " Number of border edges " << Th.nbe << "\n"
         << "----------------------------------\n";
  }
}//

macro printBarryCentersFromP0Space (){

  if( DEBUG ){

    cout << "----------------------------------\n"
         << " List of P0 Vertices for each triangle\n"
         << "----------------------------------\n";
    for(int k = 0; k < feSpcP0.ndof; ++k){
      cout << k << " : "
           << ThP0x[][k] << "\t"
           << ThP0y[][k] << "\t"
           << endl;
    }

  }
}//


macro printTriangleListForEachNode (){

  if( DEBUG ){

    cout << "----------------------------------\n"
         << " List of triangle for each vertex \n"
         << "----------------------------------\n";
    /*  Print the list of triangles *
     *  that  corresponds  to  each *
     *  vertex v in the mesh        */

    for(int v=0; v<Th.nv;++v){
      cout << v << " : ";
      for(int p=headv[v]; p >=0; p=next[p]){
        int k = p/3, i = p%3;
        assert( Th[k][i]==v);   /* check â€¦ */
        cout << k << " " ;
      }
      cout << endl;
    }

  }
}//


macro printNodeListBelonginToDomain (){

  if( DEBUG ){

    cout << "----------------------------------\n"
         << " List of nodes that are on boundary \n"
         << "----------------------------------\n";
    for(int i = 0; i < feSpcP1.ndof; ++i)
      if(abs(onGamma[i]-1.0) < 0.1)
        cout << i << " boundary " << endl;
      else
        cout << i << " inside "   << endl;

  }
}//


macro printPolyhedralMeshingStats (){

  if( DEBUG ){

    cout << "----------------------------------\n"
         << " Polyhedral mesh stats            \n"
         << "----------------------------------\n"
         << " Number of nodes  " <<  PolyNodesVTK.n  << "\n"
         << " Number of cells  " <<  PolyCellsVTK.n  << "\n"
         << "----------------------------------\n";

    cout << "\n ---Nodes--- \n"<< PolyNodesVTK << endl;
    cout << "\n ---Cells--- \n"<< PolyCellsVTK << endl;

  }
}//

macro printNumberOfAssociatedTria (){

  if( DEBUG ){
    cout << "----------------------------------\n"
         << " Number of associated triangles   \n"
         << "----------------------------------\n"
         << nAssociateTriangles[] << endl;
  }
}//

//-----------------------------------------
// Output triangular mesh to ParaView
//-----------------------------------------

macro saveInputMeshVtu(){

  if( DEBUG ){

    load "iovtk";
    int[int] vtuFileOrder = [1];

    savevtk( ""+ThName+"_tria.vtu"     ,
             Th                  ,
             order = vtuFileOrder
           );
  }

}//

