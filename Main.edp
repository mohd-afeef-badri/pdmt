/*****************************************************************************

         This file is a part of PDMT (Parallel Dual Meshing Tool)

     -------------------------------------------------------------------

     Author(s): Mohd Afeef Badri
     Email    : mohd-afeef.badri@cea.com
     Date     : 14/01/2022
     Comment  : The program finds dual of a triangular mesh and then
                create a polyhedral mesh from the underlying Voronoi
                frame. The reason to use  PSD  for this meshing tool
                is the use of finite element framework for this tool

     -------------------------------------------------------------------

     PDMT a parallel  dual meshing tool uses   finite  element framework
     to convert a triangular / tetrahedral mesh into a  polyhedral  mesh.
     PDMT is distributed  in  the  hope that it  will be useful, HOWEVER
     WITHOUT ANY WARRANTY; or without  even  implied warranty of FITNESS
     FOR A PARTICULAR PURPOSE.

     -------------------------------------------------------------------

     USAGE:
     how to run

       PSD_Solve_Seq Main.edp --debug --mesh ./name/of/mesh/mesh.msh
       PSD_Solve_Seq Main.edp --mesh ./name/of/mesh/mesh.mesh

     command line parameters

       --debug    : to print some verbos info
       --mesh     : to provide external mesh (accepts .mesh and .msh)

*******************************************************************************/


load    "./cpp/pdmt";                    // Load pdmt library

include "getCommandLineInput.edp";       // Get commandline imput parameters
include "debug.edp";                     // Contains debug macros (verbos prints)
include "meshIO.edp";                    // mesh loading and saving
include "feSpacesAndVariables.edp";      // FEM spaces and variables
include "algorithms.edp";                // includes algorithms used

if (DEBUG){
  printProgramBegins;                 // prints only if --debug
  loadMesh;
  saveInputMeshVtu;                   // saves  only if --debug
  printInputMeshStats;                // prints only if --debug
  buildFeSpacesAndVariables;
  printBarryCentersFromP0Space        // prints only if --debug
  identifyCellHeadAndNextVerticies;
  printTriangleListForEachNode ;      // prints only if --debug
  identifyBorderAndNonBorderNodes;
  printNodeListBelonginToDomain;      // prints only if --debug
  calculateTotalLocalConnectivity;
  printNumberOfAssociatedTria;        // prints only if --debug
  initilizePolyMesh;
  computePolyMesh;
  printPolyhedralMeshingStats;        // prints only if --debug
  savePolyMesh;
}
else{
  loadMesh;
  buildFeSpacesAndVariables;
  identifyCellHeadAndNextVerticies;
  identifyBorderAndNonBorderNodes;
  calculateTotalLocalConnectivity;
  initilizePolyMesh;
  computePolyMesh;
  savePolyMesh;
}
