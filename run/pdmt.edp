/*****************************************************************************

         This file is a part of PDMT (Parallel Dual Meshing Tool)

     -------------------------------------------------------------------

     Author(s): Mohd Afeef Badri
     Email    : mohd-afeef.badri@cea.com
     Date     : 14/01/2022
     Comment  : The program finds dual of a triangular mesh and then
                create a polyhedral mesh from the underlying Voronoi
                frame.

     -------------------------------------------------------------------

     PDMT a parallel  dual meshing tool uses   finite  element framework
     to convert a triangular / tetrahedral mesh into a  polyhedral  mesh.
     PDMT is distributed  in  the  hope that it  will be useful, HOWEVER
     WITHOUT ANY WARRANTY; or without  even  implied warranty of FITNESS
     FOR A PARTICULAR PURPOSE.

     -------------------------------------------------------------------

     USAGE:
     how to run

       FreeFem++ Main.edp --debug --mesh ./name/of/mesh/mesh.msh
       FreeFem++ Main.edp --mesh ./name/of/mesh/mesh.mesh

     command line parameters

       --debug    : to print some verbos info
       --mesh     : to provide external mesh (accepts .mesh, .msh, .vtk, .typ)
                    also accepts ("square" or "circle")
       --med_mesh_name     : to provide name of mesh in med file

*******************************************************************************/


load    "./../src/pdmt";                 // Load pdmt library
//load    "PETSc";

include "getARGV.idp";                   // Activate Commandline arguments
include "meshIO.idp";                    // mesh loading and saving

//----------------------------------------------------------------------
//       Nomenclature
//----------------------------------------------------------------------
/*

  Th    =  $\mathcal T_h$     = 2D triangular mesh
  Ph    =  $\mathcal P_h$     = 2D polygon mesh
  Ti    =     $\T_i$          = triangular element of mesh Th
  Pi    =     $\P_i$          = polygon element of mesh Th
  Name  =       -             = name of something
  Nn    =     $N_n$           = number of nodes
  Nni   =     $N_ni$          = number of nodes inside (!boundary)
  Nnb   =     $N_nb$          = number of nodes on boundary
  Nt    =     $N_t$           = number of triangles
  Nbe   =     $N_be$          = number of boundary edges
  Np    =     $N_p$           = number of polygons
  Ne    =     $N_e$           = number of edges
  V0h   =     $V0_{h}$        = piecewise constant finite element space
  V1h   =     $V1_{h}$        = piecewise linear finite element space
  ThVix = ${\V_x\}_{i=0}^N_n$ = x - coordinate at each vertex of mesh
  ThViy = ${\V_y\}_{i=0}^N_n$ = y - coordinate at each vertex of mesh
  ThTix = ${\T_x\}_{i=0}^N_t$ = triangle centre node x - coordinate
  ThTiy = ${\T_y\}_{i=0}^N_t$ = triangle centre node y - coordinate
  ThEix = ${\E_x\}_{i=0}^N_be$= edge centre node x - coordinate
  ThEiy = ${\E_y\}_{i=0}^N_be$= edge centre node y - coordinate
  PhV   = $\{Vx, Vy\}_{i=1}^{N_n}$ = 2D polygon mesh vertices vector
*/

//    macro dimension()2// EOM
//    include "macro_ddm.idp"

func int run (){

//-----------------------------------------------------------------------
// load mesh
//-----------------------------------------------------------------------
 string ThName      = getARGV( "--mesh" , "circle" );           // Name of the mesh
 string MedMeshName = getARGV( "--med_mesh_name" , "Mesh_1" );  // Name of the mesh
 mesh   Th          = loadTheMesh( ThName , MedMeshName );      // function in meshIO.edp



//-----------------------------------------------------------------------
// build distributed mesh (ParMetis is used)
//-----------------------------------------------------------------------
// buildDmesh(Th);                           // partition the mesh



//-----------------------------------------------------------------------
// get mesh info
//-----------------------------------------------------------------------
 int[int] isBorderNode ,                    // vector to mark boundary node
          meshInfo     ;                    // info on mesh (Nn, Nt, Nbe,..)

 PdmtGetMeshInfo(Th,isBorderNode,meshInfo); // function from pdmt library

 int ThNn  =  meshInfo[0],                  // # nodes
     ThNni =  meshInfo[1],                  // # inside nodes
     ThNnb =  meshInfo[2],                  // # boundary nodes
     ThNt  =  meshInfo[3],                  // # triangles
     ThNbe =  meshInfo[4];                  // # boundary edges



//-----------------------------------------------------------------------
// create search tables
//-----------------------------------------------------------------------
  int[int] headvb, nextb;                      // search table head and next vertex
  PdmtFillSearchTableEdges(Th,headvb,nextb);   // function from pdmt library

  int[int] headv, next;                        // search table head and next vertex
  PdmtFillSearchTableTriangles(Th,headv,next); // function from pdmt library



//-----------------------------------------------------------------------
// create finite element spaces
//-----------------------------------------------------------------------
  fespace V0h(Th,P0);
  fespace V1h(Th,P1);



//-----------------------------------------------------------------------
// compute nodes/labels for polygons
//-----------------------------------------------------------------------
  V0h   ThTix = x, ThTiy = y;            // nodes at triangle centres
  V1h   ThVix = x, ThViy = y;            // nodes at vertices

  real[int] ThEix(ThNbe), ThEiy(ThNbe);  // nodes at boundary edge centres
  int[int]  ThEiLab(ThNbe);              // labels of edges

  // build barry centre nodes //
  for(int e=0; e<ThNbe;++e){
    ThEix(e) = 0.5*(Th(Th.be(e)[0]).x + Th(Th.be(e)[1]).x); // x coordinate
    ThEiy(e) = 0.5*(Th(Th.be(e)[0]).y + Th(Th.be(e)[1]).y); // y coordinate
    ThEiLab(e) = Th.be(e).label;                            // label on edge
  }



//-----------------------------------------------------------------------
// initialize polyhedral mesh
//-----------------------------------------------------------------------
  real[int,int]  PhV(0,0);
  int [int]      PhELabels;
  int [int][int] PhC;
  int [int][int] PhE;

{
  int PhNn =  ThNt  + ThNnb + ThNbe;
  int PhNp =  ThNni + ThNbe;
  int PhNe =  ThNbe*2;

  PhV.resize(PhNn,2);
  PhC.resize(PhNp);
  PhE.resize(PhNe);
  PhELabels.resize(PhNp + PhNe);
}



//-----------------------------------------------------------------------
//  fill polygon mesh nodes
//-----------------------------------------------------------------------
{
  int polynodeindex = 0;

  for(int t=0; t<ThNt;++t){
    PhV(polynodeindex,0) = ThTix[][t];
    PhV(polynodeindex,1) = ThTiy[][t];
    polynodeindex++;
  }

  for(int n=0; n<ThNn;++n){
    if(isBorderNode[n]){
      PhV(polynodeindex,0) = ThVix[][n];
      PhV(polynodeindex,1) = ThViy[][n];
      polynodeindex++;
    }
  }

  for(int be=0; be<ThNbe;++be){
    PhV(polynodeindex,0) = ThEix(be);
    PhV(polynodeindex,1) = ThEiy(be);
    polynodeindex++;
  }
}



//-----------------------------------------------------------------------
//  compute polygon mesh cells
//-----------------------------------------------------------------------
// assisting macro
macro vectorPushBack(V, p1, p2, p3)
   V#x.resize(V#x.n+1);
   V#y.resize(V#y.n+1);
   V#Index.resize(V#Index.n+1);

   V#x[V#x.n-1]         = p1;
   V#y[V#y.n-1]         = p2;
   V#Index[V#Index.n-1] = p3;
//

{
  real[int]  Pix(0), Piy(0) ;
  int[int]   PiIndex(0)     ;
  int indexedge = 0         ;
  int indexploy = 0         ;
  int indexnbe  = 0         ;
  V1h PiNe = 0              ;

  for(int v=0; v<ThNn; ++v){

    Pix.resize(0); Piy.resize(0); PiIndex.resize(0);

    if(isBorderNode[v]){

      for(int p=headv[v]; p >=0; p=next[p]){
        int k = p/3;
        vectorPushBack(Pi, ThTix[][k], ThTiy[][k], k );
        PiNe[][v] = PiNe[][v] + 1;
        PhELabels[indexploy] = Th[k].region;
      }

       //---- original border nodes ----//
       // problematic for convex-hull  //
       //      TO DO TO DO TO DO       //
//      vectorPushBack(Pi, ThVix[][v], ThViy[][v], int(ThNt + indexnbe) );
//      PiNe[][v]      = PiNe[][v] + 1;


      // New procedure for adding the border point //
      int pointBorder =  int(ThNt + indexnbe);
      int[int] posVect(2);
      int[int] edgeLocalLab (2);
      int count=0;

      for(int p=headvb[v]; p >=0; p=nextb[p]){
        int k = p/2;
        vectorPushBack(Pi, ThEix(k), ThEiy(k), int(ThNt + ThNbe + k) );
        PiNe[][v] = PiNe[][v] + 1;

        edgeLocalLab[count] = ThEiLab(k);
        posVect[count] = int(ThNt + ThNbe + k);
        count++;
      }

      pdmtConvexHull(Pix,Piy,PiIndex);

      PhC[indexploy].resize(PiNe[][v]);

      for(int kk=0; kk < PiIndex.n ; kk++)
        PhC[indexploy][kk] = PiIndex[kk];


     // add the boundary point //
      int pos = 1;
      count   = 0;
      int[int] poskk (2);

      for(int kk=0; kk < PiIndex.n  ; kk++){
        if (PhC[indexploy][kk] == posVect[0] || PhC[indexploy][kk] == posVect[1])
            {
            poskk[count] = kk;count++;
        }
      }

      if((poskk[1]- poskk[0]) > 1 ){
          pos = poskk[1] + 2;
      }else{
          pos = poskk[1] + 1;
      }

      PhC[indexploy].resize(PhC[indexploy].n+1);

      for (int i = PhC[indexploy].n -1  ; i >= pos; i--)
        PhC[indexploy][i] = PhC[indexploy][i - 1];

      PhC[indexploy][pos - 1 ] = pointBorder;

      PhE[indexedge].resize(2);
      PhE[indexedge][0] = posVect[0];
      PhE[indexedge][1] = pointBorder;
      PhELabels[ThNni + ThNbe + indexedge] = edgeLocalLab[0];
      indexedge++;

      PhE[indexedge].resize(2);
      PhE[indexedge][0] = pointBorder;
      PhE[indexedge][1] = posVect[1];
      PhELabels[ThNni + ThNbe + indexedge] = edgeLocalLab[1];
      indexedge++;

      indexploy++;
      indexnbe++;

    }else{

      for(int p=headv[v]; p>=0; p=next[p]){
        int k = p/3;
        vectorPushBack(Pi, ThTix[][k], ThTiy[][k], k );
        PiNe[][v] = PiNe[][v] + 1;
        PhELabels[indexploy] = Th[k].region;
      }

      pdmtConvexHull(Pix,Piy,PiIndex);

      PhC[indexploy].resize(PiNe[][v]);
      for(int kk; kk < PiIndex.n ; kk++)
        PhC[indexploy][kk] = PiIndex[kk];

      indexploy++;
    }
  }
}


//-----------------------------------------------------------------------
//  save polygon mesh
//-----------------------------------------------------------------------

/*
// To write a .vtk mesh without edges
  PdmtPolyMeshWrite(  ""+ThName+"_poly_"+mpirank+".vtk",
                      nodes = PhV,
                      cells = PhC
                   );
*/



// To write a .med mesh with/without edges
//PdmtPolyMeshWrite(  ""+ThName+"_poly_"+mpirank+".med",
  PdmtPolyMeshWrite(  ""+ThName+"_poly.med",
                      nodes = PhV,
                      cells = PhC,
                      edges = PhE,          // this is optional
                      labels = PhELabels    // this is optional
                   );


//PdmtPolyMeshWrite(  ""+ThName+"_poly_mpirank_"+mpirank+".vtk",
  PdmtPolyMeshWrite(  ""+ThName+"_poly.vtk",
                      nodes = PhV,
                      cells = PhC,
                      edges = PhE,          // this is optional
                      labels = PhELabels    // this is optional
                   );

  PdmtPolyMeshWrite(  ""+ThName+"_poly.vtu",
                      nodes = PhV,
                      cells = PhC,
                      edges = PhE,          // this is optional
                      labels = PhELabels    // this is optional
                   );

  PdmtPolyMeshWrite(  ""+ThName+"_poly.typ2",
                      nodes = PhV,
                      cells = PhC,
                      edges = PhE,          // this is optional
                      labels = PhELabels    // this is optional
                   );

  return 0;
}

run();
