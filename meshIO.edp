/*****************************************************************************

         This file is a part of PDMT (Parallel Dual Meshing Tool)

     -------------------------------------------------------------------

     Author(s): Mohd Afeef Badri
     Email    : mohd-afeef.badri@cea.com
     Date     : 22/02/2022
     Comment  : The program finds dual of a triangular mesh and then
                create a polyhedral mesh from the underlying Voronoi
                frame. The reason to use  PSD  for this meshing tool
                is the use of finite element framework for this tool

     -------------------------------------------------------------------

     PDMT a parallel  dual meshing tool uses   finite  element framework
     to convert a triangular / tetrahedral mesh into a  polyhedral  mesh.
     PDMT is distributed  in  the  hope that it  will be useful, HOWEVER
     WITHOUT ANY WARRANTY; or without  even  implied warranty of FITNESS
     FOR A PARTICULAR PURPOSE.

*******************************************************************************/

//-----------------------------------------------------------------------------
// loadTheMesh : This function Load or create tria. mesh
//-----------------------------------------------------------------------------
//
// USAGE:
//    The `--mesh` argument provides the mesh in .msh | .mesh | .vtk for this
//    function. In this case we use  `mesh Th = loadTheMesh(ThName);`
//
//    The user can also directly provide the  mesh  via a  string argument to
//    this function  `mesh Th = loadTheMesh("meshMesh.mesh");`
//
//    The user can load a simple square or circle mesh by using the following
//    `mesh Th = loadTheMesh("square")` or `mesh Th = loadTheMesh("circle")`
//
//----------------------------------------------------------------------------

func mesh loadTheMesh(string meshName){

//----------------------------------------------------------------------------
// mesh Th2D:
//   $\mathcal{T}_h$ is triangulation of $\Omega$ with size  $h$. The
//   $\mathcal{T}_h$ is a set of triangles $\{T_k\}_{k=1,\cdots,n_t}$
//   with $n_t$ being the nuber of triangles. Also $\Omega_h=\cup_{k=1}^{n_t}T_k$.
//----------------------------------------------------------------------------

    mesh Th2D;

    if(   (meshName.find(".mesh") == -1 && meshName.find(".msh") == -1 && meshName.find(".vtk") == -1) 
        &&(meshName == "square" && meshName == "circle" )){
      cout << " ******************* ERROR ***********************\n"
           << "  Error in input mesh                             \n"
           << "  PDMT only accepts '.msh' '.mesh' '.vtk' formats \n"
           << " ******************* ERROR ***********************\n"
           << endl;
      exit(1111);
    }

    if( meshName.find(".msh") > -1 ){
      load "gmsh"
      Th2D = gmshload(meshName);
    }

    if( meshName.find(".mesh") > -1 ){
      Th2D = readmesh(meshName);
    }

    if( meshName.find(".vtk") > -1 ){
      load "iovtk"
      Th2D = vtkload(meshName);
    }

    if( meshName == "square" )
      Th2D = square (2,2);
      
    if( meshName == "circle" ){
      border a(t=0, 2*pi){x=cos(t); y=sin(t); label=1;}
      Th2D = buildmesh(a(100));
    }

    return Th2D;
}
